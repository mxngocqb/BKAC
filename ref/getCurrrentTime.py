import paho.mqtt.client as mqtt
import json
import time

# MQTT Server Parameters
MQTT_CLIENT_ID = "ESP32_weather"
MQTT_BROKER = "18.142.251.211"
MQTT_PORT = 1883
MQTT_USER = "nyazmorbx0axvf69na0g"
MQTT_PASSWORD = "28rd13yt6uw6nrrz2x7z"

MQTT_RPC_REQUEST_TOPIC = "v1/devices/me/rpc/request/"
MQTT_RPC_RESPONSE_TOPIC = "v1/devices/me/rpc/response/+"

subscribed = False  # Bi·∫øn ki·ªÉm tra ƒë√£ subscribe hay ch∆∞a


# Callback khi k·∫øt n·ªëi th√†nh c√¥ng
def on_connect(client, userdata, flags, rc):
    global subscribed
    if rc == 0:
        if not subscribed:
            client.subscribe(MQTT_RPC_RESPONSE_TOPIC)
            print(f" Subscribed to {MQTT_RPC_RESPONSE_TOPIC}")
            subscribed = True  # ƒê√°nh d·∫•u ƒë√£ subscribe

        # G·ª≠i y√™u c·∫ßu RPC l·∫•y th·ªùi gian hi·ªán t·∫°i
        request_id = int(time.time())  # T·∫°o request_id d·ª±a tr√™n timestamp
        request = {
            "method": "getCurrentTime",
            "params": {}
        }
        topic = MQTT_RPC_REQUEST_TOPIC + str(request_id)
        payload = json.dumps(request)

        client.publish(topic, payload)
        print(f" Sent RPC request: Topic: {topic}  Payload: {payload}")
    else:
        print(f" Failed to connect, return code {rc}")


# Callback khi nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ MQTT broker
def on_message(client, userdata, msg):
    print(f"üì© Received message on topic: {msg.topic}")
    try:
        response = json.loads(msg.payload.decode())  # Gi·∫£i m√£ JSON
        print(f"üîπ Response: {response}")
    except json.JSONDecodeError:
        print(f"‚ö†Ô∏è Invalid JSON response: {msg.payload.decode()}")


client = mqtt.Client(client_id=MQTT_CLIENT_ID, callback_api_version=mqtt.CallbackAPIVersion.VERSION1)
client.username_pw_set(MQTT_USER, MQTT_PASSWORD)

# G√°n callback
client.on_connect = on_connect
client.on_message = on_message

# K·∫øt n·ªëi ƒë·∫øn MQTT broker
client.connect(MQTT_BROKER, MQTT_PORT, 60)

# V√≤ng l·∫∑p l·∫Øng nghe s·ª± ki·ªán
client.loop_forever()
